/*
 * Copyright 2014–2016 The javautils contributors (see NOTICE.txt)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package net.kullo.javautils;

import junit.framework.TestCase;

import java.nio.charset.Charset;
import java.util.Arrays;

public class StrictBase64Test extends TestCase {

    static void assertBytearrayEquals(byte[] expected, byte[] actual) {
        assertTrue(Arrays.equals(expected, actual));
    }

    public void testEncodeBinaryEmpty() throws Exception {
        assertEquals("", StrictBase64.encode(new byte[0]));
    }

    public void testEncodeBinaryShort() throws Exception {
        // test vectors from http://tools.ietf.org/html/rfc4648
        assertEquals("Zg==", StrictBase64.encode(new byte[]{'f'}));
        assertEquals("Zm8=", StrictBase64.encode(new byte[]{'f', 'o'}));
        assertEquals("Zm9v", StrictBase64.encode(new byte[]{'f', 'o', 'o'}));
        assertEquals("Zm9vYg==", StrictBase64.encode(new byte[]{'f', 'o', 'o', 'b'}));
        assertEquals("Zm9vYmE=", StrictBase64.encode(new byte[]{'f', 'o', 'o', 'b', 'a'}));
        assertEquals("Zm9vYmFy", StrictBase64.encode(new byte[]{'f', 'o', 'o', 'b', 'a', 'r'}));
    }

    public void testEncodeBinary() throws Exception {    // Generated by: cat /dev/urandom | head -c 3 | tee /tmp/mybinary | hexdump -C && cat /tmp/mybinary | base64
        byte[] binary1 = {(byte) 0x9b};
        assertEquals("mw==", StrictBase64.encode(binary1));

        byte[] binary2 = {(byte) 0x1c, (byte) 0x60};
        assertEquals("HGA=", StrictBase64.encode(binary2));

        byte[] binary3 = {(byte) 0x81, (byte) 0x34, (byte) 0xbd};
        assertEquals("gTS9", StrictBase64.encode(binary3));

        byte[] binary4 = {(byte) 0x5e, (byte) 0x6c, (byte) 0xff, (byte) 0xde};
        assertEquals("Xmz/3g==", StrictBase64.encode(binary4));

        byte[] binary5 = {(byte) 0xb2, (byte) 0xcd, (byte) 0xf0, (byte) 0xdc, (byte) 0x7f};
        assertEquals("ss3w3H8=", StrictBase64.encode(binary5));

        byte[] binary6 = {(byte) 0xfc, (byte) 0x56, (byte) 0x2d, (byte) 0xda, (byte) 0xd4, (byte) 0x0e};
        assertEquals("/FYt2tQO", StrictBase64.encode(binary6));

        byte[] binary7 = {(byte) 0x29, (byte) 0xb2, (byte) 0x32, (byte) 0x2e, (byte) 0x88, (byte) 0x41, (byte) 0xe8};
        assertEquals("KbIyLohB6A==", StrictBase64.encode(binary7));

        byte[] binary8 = {(byte) 0x0f, (byte) 0x0f, (byte) 0xce, (byte) 0xd9, (byte) 0x49, (byte) 0x7a, (byte) 0xaf, (byte) 0x92};
        assertEquals("Dw/O2Ul6r5I=", StrictBase64.encode(binary8));

        byte[] binary9 = {(byte) 0x27, (byte) 0x0f, (byte) 0xb1, (byte) 0x89, (byte) 0x82, (byte) 0x80, (byte) 0x0d, (byte) 0xa6, (byte) 0x40};
        assertEquals("Jw+xiYKADaZA", StrictBase64.encode(binary9));
    }

    public void testDecodeEmpty() throws Exception {
        assertBytearrayEquals(new byte[0], StrictBase64.decode(""));
    }

    public void testDecodeShortString() throws Exception {
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("Zg=="));
        assertBytearrayEquals(new byte[]{'f', 'o'}, StrictBase64.decode("Zm8="));
        assertBytearrayEquals(new byte[]{'f', 'o', 'o'}, StrictBase64.decode("Zm9v"));
    }

    public void testDecodeShortStringIgnoreWhitespace() throws Exception {
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode(" Zg==", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("Z g==", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("Zg ==", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("Zg= =", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("Zg== ", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("\nZg==", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("Z\ng==", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("Zg\n==", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("Zg=\n=", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("Zg==\n", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("\rZg==", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("Z\rg==", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("Zg\r==", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("Zg=\r=", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("Zg==\r", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("\tZg==", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("Z\tg==", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("Zg\t==", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("Zg=\t=", true));
        assertBytearrayEquals(new byte[]{'f'}, StrictBase64.decode("Zg==\t", true));
    }

    public void testDecodeString() throws Exception {
        // Generated by: echo -n "xyz" | base64
        assertBytearrayEquals(new byte[]{'h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd'}, StrictBase64.decode("aGVsbG8gd29ybGQ="));
        assertBytearrayEquals(new byte[]{'h', 'e', 'l', 'l', 'o', ' ', 'w', 'o', 'r', 'l', 'd', '!'}, StrictBase64.decode("aGVsbG8gd29ybGQh"));
        assertBytearrayEquals(new byte[]{'H', 'e', 'l', 'l', 'o', ',', ' ', 'w', 'o', 'r', 'l', 'd', '.'}, StrictBase64.decode("SGVsbG8sIHdvcmxkLg=="));

        assertBytearrayEquals(new byte[]{'T', 'h', 'e', ' ', '1', '2', ' ', 'c', 'h', 'a', 'r', 's'},
                StrictBase64.decode("VGhlIDEyIGNoYXJz"));
        assertBytearrayEquals(new byte[]{'T', 'h', 'e', ' ', '1', '3', ' ', 'c', 'h', 'a', 'r', 's', '.'},
                StrictBase64.decode("VGhlIDEzIGNoYXJzLg=="));
        assertBytearrayEquals(new byte[]{'T', 'h', 'e', ' ', '1', '4', ' ', 'c', 'h', 'a', 'r', 's', '.', '.'},
                StrictBase64.decode("VGhlIDE0IGNoYXJzLi4="));
        assertBytearrayEquals(new byte[]{'T', 'h', 'e', ' ', '1', '5', ' ', 'c', 'h', 'a', 'r', 's', '.', '.', '.'},
                StrictBase64.decode("VGhlIDE1IGNoYXJzLi4u"));
    }

    public void testDecodeStringSpecialChars() throws Exception {
        // Generated by: echo -n "xyz" | base64
        // Generated by: echo -n "xyz" | hexdump -C

        // ß
        assertBytearrayEquals("ß".getBytes("UTF-8"), StrictBase64.decode("w58="));
        assertBytearrayEquals(new byte[]{(byte) 0xC3, (byte) 0x9f}, StrictBase64.decode("w58="));
        // ü
        assertBytearrayEquals("ü".getBytes("UTF-8"), StrictBase64.decode("w7w="));
        assertBytearrayEquals(new byte[]{(byte) 0xC3, (byte) 0xBC}, StrictBase64.decode("w7w="));
    }


    public void testDecodeBinary() throws Exception {
        // Generated by: cat /dev/urandom | head -c 3 | tee /tmp/mybinary | hexdump -C && cat /tmp/mybinary | base64

        byte[] binary0 = {};
        assertBytearrayEquals(binary0, StrictBase64.decode(""));

        byte[] binary1 = {(byte) 0x9b};
        assertBytearrayEquals(binary1, StrictBase64.decode("mw=="));

        byte[] binary2 = {(byte) 0x1c, (byte) 0x60};
        assertBytearrayEquals(binary2, StrictBase64.decode("HGA="));

        byte[] binary3 = {(byte) 0x81, (byte) 0x34, (byte) 0xbd};
        assertBytearrayEquals(binary3, StrictBase64.decode("gTS9"));

        byte[] binary4 = {(byte) 0x5e, (byte) 0x6c, (byte) 0xff, (byte) 0xde};
        assertBytearrayEquals(binary4, StrictBase64.decode("Xmz/3g=="));

        byte[] binary5 = {(byte) 0xb2, (byte) 0xcd, (byte) 0xf0, (byte) 0xdc, (byte) 0x7f};
        assertBytearrayEquals(binary5, StrictBase64.decode("ss3w3H8="));

        byte[] binary6 = {(byte) 0xfc, (byte) 0x56, (byte) 0x2d, (byte) 0xda, (byte) 0xd4, (byte) 0x0e};
        assertBytearrayEquals(binary6, StrictBase64.decode("/FYt2tQO"));

        byte[] binary7 = {(byte) 0x29, (byte) 0xb2, (byte) 0x32, (byte) 0x2e, (byte) 0x88, (byte) 0x41, (byte) 0xe8};
        assertBytearrayEquals(binary7, StrictBase64.decode("KbIyLohB6A=="));

        byte[] binary8 = {(byte) 0x0f, (byte) 0x0f, (byte) 0xce, (byte) 0xd9, (byte) 0x49, (byte) 0x7a, (byte) 0xaf, (byte) 0x92};
        assertBytearrayEquals(binary8, StrictBase64.decode("Dw/O2Ul6r5I="));

        byte[] binary9 = {(byte) 0x27, (byte) 0x0f, (byte) 0xb1, (byte) 0x89, (byte) 0x82, (byte) 0x80, (byte) 0x0d, (byte) 0xa6, (byte) 0x40};
        assertBytearrayEquals(binary9, StrictBase64.decode("Jw+xiYKADaZA"));
    }

    public void testDecodeIllegalWhitespace() throws Exception {
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Zg==");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(false, didThrow);
        }
        // Space
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode(" Zg==");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Z g==");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Zg ==");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Zg= =");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Zg== ");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        // Newline
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("\nZg==");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Z\ng==");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Zg\n==");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Zg=\n=");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Zg==\n");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        // Tab
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("\tZg==");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Z\tg==");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Zg\t==");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Zg=\t=");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Zg==\t");
            } catch (Exception e) {
                didThrow = true; }
            assertEquals(true, didThrow);
        }
        // Carriage Return
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("\rZg==");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Z\rg==");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Zg\r==");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Zg=\r=");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Zg==\r");
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
    }

    public void testDecodeIllegalCharacterWhenWhitespaceAllowed() throws Exception {
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode(" Zg==", true);
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(false, didThrow);
        }
        // Space
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode(", Zg==", true);
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Z ,g==", true);
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Zg =?=", true);
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Zg= =~", true);
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            boolean didThrow = false;
            try {
                StrictBase64.decode("Zg== #", true);
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            // Correct length (8) before remong whitespace
            boolean didThrow = false;
            try {
                StrictBase64.decode("Zg== #  ", true);
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            // Correct length (8) after removing whitespace
            boolean didThrow = false;
            try {
                StrictBase64.decode(" 1234567? ", true);
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
        {
            // Correct length (8) after removing whitespace
            boolean didThrow = false;
            try {
                StrictBase64.decode(" 123,5678 ", true);
            } catch (StrictBase64.DecodingException e) { didThrow = true; }
            assertEquals(true, didThrow);
        }
    }
}
